pipeline {
  agent any

  environment {
    COMPOSE_PROJECT_DIR = "${WORKSPACE}/infra"
  }

  stages {

    // ✅ 변경 감지
    stage('Git 변경 확인') {
      steps {
        script {
          def changedFiles = sh(script: "git diff --name-only HEAD~1", returnStdout: true).trim()

          env.DEFAULT_CONF_CHANGED = changedFiles.contains("infra/nginx/conf.d/default.conf") ? "true" : "false"
          env.FRONTEND_CHANGED = changedFiles.contains("frontend/") ? "true" : "false"
          env.BACKEND_CHANGED = changedFiles.contains("backend/") ? "true" : "false"
          env.FASTAPI_CHANGED = changedFiles.contains("ai/") ? "true" : "false"

          echo "🔍 변경된 파일 목록:\n${changedFiles}"
          echo "🟠 Nginx default.conf 변경됨: ${env.DEFAULT_CONF_CHANGED}"
          echo "🎨 프론트엔드 변경됨: ${env.FRONTEND_CHANGED}"
          echo "🛠️ 백엔드 변경됨: ${env.BACKEND_CHANGED}"
          echo "⚡ FastAPI 변경됨: ${env.FASTAPI_CHANGED}"
        }
      }
    }

    // 🔐 환경 변수 및 secret 파일 복사
    stage('Secret 파일 다운로드') {
      steps {
        withCredentials([
          file(credentialsId: 'env-docker-compose', variable: 'ENV_FILE'),
          file(credentialsId: 'spring-secrets', variable: 'SECRETS_FILE'),
          file(credentialsId: 'env-frontend', variable: 'FRONTEND_ENV_FILE')
        ]) {
          sh '''
            cp "$ENV_FILE" infra/.env
            cp "$SECRETS_FILE" backend/src/main/resources/secrets.properties
            cp "$FRONTEND_ENV_FILE" frontend/.env
          '''
        }
      }
    }

    // 🛠️ 백엔드 빌드
    stage('백엔드 JAR 빌드') {
      when {
        expression { env.BACKEND_CHANGED == "true" }
      }
      steps {
        echo "⚙️ 백엔드 Gradle 빌드 시작"
        dir('backend') {
          sh './gradlew build -x test --no-daemon'
        }
      }
    }

    // 🎨 프론트 빌드
    stage('프론트엔드 빌드') {
      when {
        expression { env.FRONTEND_CHANGED == "true" }
      }
      steps {
        echo "🛠️ 프론트엔드 빌드 시작"
        dir('frontend') {
          sh '''
            echo "🧹 dist 정리"
            rm -rf dist

            echo "📦 의존성 설치"
            npm ci --no-optional || exit 1

            echo "🏗️ Vite 빌드"
            npm run build || exit 1

            [ -d dist ] || {
              echo "❌ dist 디렉토리 없음, 빌드 실패"
              exit 1
            }
          '''
        }
      }
    }

    // 🐳 도커 빌드 및 재시작
    stage('도커 이미지 빌드 및 변경 서비스 재시작') {
      steps {
        script {
          def buildFlags = ""
          if (env.DEFAULT_CONF_CHANGED == "true" || env.FASTAPI_CHANGED == "true") {
            echo "♻️ default.conf 또는 FastAPI 변경 → --no-cache 적용"
            buildFlags = "--no-cache"
          }

          sh """
            echo "🚀 Docker 이미지 빌드"
            docker compose -f infra/docker-compose.yml build ${buildFlags}
            docker compose -f infra/docker-compose.yml up -d
          """
        }
      }
    }
  }

  post {
    failure {
      echo '❌ 빌드 실패! 에러 로그를 확인해주세요.'
    }
    success {
      echo '🎉 배포 성공! Letterring 서비스가 자동으로 반영되었습니다.'
    }
  }
}
